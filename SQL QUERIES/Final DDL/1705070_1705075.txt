/*
This is a text file containig all necessary SQL commands for making all the tables need for our project
Project Name: Instagram
Student ID: 1705070 & 1705075
*/

-- The CREATE TABLE command is used to make table


-- The following command is related to make user-information table.

CREATE TABLE USERACCOUNT(
	USER_ID INTEGER PRIMARY KEY,
	USER_NAME VARCHAR2(100) NOT NULL,
	FULL_NAME VARCHAR2(200),
	EMAIL VARCHAR2(200), 
	PASSWORD VARCHAR2(50) NOT NULL,
	GENDER VARCHAR2(15),
	ADDRESS VARCHAR2(200),
	BIO VARCHAR2(300),
	DATE_OF_BIRTH DATE,
	CREATED DATE default SYSDATE, 
	IMG_SRC VARCHAR2(500)
);


-- The following command is used for making a table that directly depends on user-information table
-- This table contains information of followers and followees 

CREATE TABLE FOLLOWS(
    	FOLLOWER_ID INTEGER NOT NULL,
    	FOLLOWEE_ID INTEGER NOT NULL,
	FOLLOWED_TIME DATE DEFAULT SYSDATE,
		
    	PRIMARY KEY (FOLLOWER_ID,  FOLLOWEE_ID),
		
    	FOREIGN KEY (FOLLOWER_ID ) REFERENCES USERACCOUNT(USER_ID),
	FOREIGN KEY (FOLLOWEE_ID ) REFERENCES USERACCOUNT(USER_ID)

);


-- This table is related to post

CREATE TABLE POST(
	POST_ID INTEGER PRIMARY KEY,
	CAPTION VARCHAR2(1000),
	IMG_SRC VARCHAR2(500),
	CREATED DATE default SYSDATE, 
	PRIVACY VARCHAR(10) DEFAULT 'PUBLIC'
);


-- This table is about tagged users 
-- Depends on user-information and post table

CREATE TABLE TAGGED(
    	TAGGED_ID INTEGER NOT NULL,
    	POST_ID INTEGER NOT NULL,
		
    	PRIMARY KEY (TAGGED_ID,  POST_ID),
		
    	FOREIGN KEY (TAGGED_ID) REFERENCES USERACCOUNT(USER_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);


-- Table directly related to user information and post table
-- Contains likes share informations 

CREATE TABLE USER_LIKES_POST(
    	USER_ID INTEGER NOT NULL,
    	POST_ID INTEGER NOT NULL,
	LIKED_TIME DATE DEFAULT SYSDATE,
	
    	PRIMARY KEY (USER_ID,  POST_ID),
	
    	FOREIGN KEY (USER_ID) REFERENCES USERACCOUNT(USER_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);


-- Directly depends on user-information and post table

CREATE TABLE USERPOST(
    	USER_ID INTEGER NOT NULL,
    	POST_ID INTEGER NOT NULL,
	
    	PRIMARY KEY (USER_ID,  POST_ID),
	
    	FOREIGN KEY (USER_ID) REFERENCES USERACCOUNT(USER_ID),
    	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);


-- Table that contains all the information about comments

CREATE TABLE COMMENTS(
	COMMENT_ID INTEGER PRIMARY KEY,
	CONTENT VARCHAR2(1000),
	CREATED DATE default SYSDATE
);


-- Depends on comments table

CREATE TABLE REPLY(
    	REPLY_ID INTEGER NOT NULL,
    	PARENT_ID INTEGER NOT NULL,
		
    	PRIMARY KEY (REPLY_ID,  PARENT_ID),
		
    	FOREIGN KEY (REPLY_ID) REFERENCES COMMENTS(COMMENT_ID),
	FOREIGN KEY (PARENT_ID) REFERENCES COMMENTS(COMMENT_ID)
);


-- Directly depends on user-information, post and comments table

CREATE TABLE USER_POST_COMMENT(
    	COMMENTER_ID INTEGER NOT NULL,
    	POST_ID INTEGER NOT NULL,
	COMMENT_ID INTEGER NOT NULL,
		
    	PRIMARY KEY (COMMENTER_ID,  POST_ID, COMMENT_ID),
		
    	FOREIGN KEY (COMMENTER_ID) REFERENCES USERACCOUNT(USER_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID),
	FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS(COMMENT_ID)
);


-- Table of notification info(s)

CREATE TABLE NOTIFICATION(
	NOTIFICATION_ID INTEGER PRIMARY KEY,
	CONTENT VARCHAR2(1000),
	NOTIFIED_TIME DATE default SYSDATE, 
	IS_SEEN INTEGER DEFAULT 0
);


-- Notification for users that depends on user-information and notification table

CREATE TABLE USER_NOTIFICATION(
    	USER_ID INTEGER NOT NULL,
    	NOTIFICATION_ID INTEGER NOT NULL,
		
    	PRIMARY KEY (USER_ID,  NOTIFICATION_ID),
		
    	FOREIGN KEY (USER_ID) REFERENCES USERACCOUNT(USER_ID),
	FOREIGN KEY (NOTIFICATION_ID) REFERENCES NOTIFICATION(NOTIFICATION_ID)
);
