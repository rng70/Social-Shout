--procedure for creating notification of different types
CREATE OR REPLACE
PROCEDURE CREATE_NOTIFICATION
(F_ID IN NUMBER, T_ID IN NUMBER, P_ID IN NUMBER, NOTI_TYPE IN VARCHAR2) 
IS

BEGIN
		IF F_ID <> T_ID THEN 
			INSERT INTO NOTIFICATION (FROM_ID, TO_ID, CONTENT, RELATED_POST_ID) 
			VALUES(F_ID, T_ID, NOTI_TYPE, P_ID);
		END IF;

END;
/

--trigger when a user likes a post
CREATE OR REPLACE TRIGGER LIKE_POST_TRIGGER
BEFORE INSERT
ON USER_LIKES_POST
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	P_ID NUMBER;
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	F_ID := :NEW.USER_ID;
	P_ID := :NEW.POST_ID;
	SELECT USER_ID INTO T_ID FROM POST WHERE POST_ID = P_ID;
	NOTI_TYPE := 'like';
	
	CREATE_NOTIFICATION( F_ID, T_ID, P_ID, NOTI_TYPE);

END ;
/

--trigger when a user unlikes a post
CREATE OR REPLACE TRIGGER UNLIKE_POST_TRIGGER
BEFORE DELETE
ON USER_LIKES_POST
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	P_ID NUMBER;
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	F_ID := :OLD.USER_ID;
	P_ID := :OLD.POST_ID;
	SELECT USER_ID INTO T_ID FROM POST WHERE POST_ID = P_ID;
	NOTI_TYPE := 'like';
	
	IF F_ID <> T_ID THEN
		DELETE FROM NOTIFICATION WHERE FROM_ID = F_ID
		AND TO_ID = T_ID AND CONTENT = NOTI_TYPE AND RELATED_POST_ID = P_ID;
	END IF;

END ;
/

--trigger when a user tags another user in post
CREATE OR REPLACE TRIGGER TAG_NOTIFY_TRIGGER
BEFORE INSERT
ON TAGGED
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	P_ID NUMBER;
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	SELECT USER_ID INTO F_ID FROM POST WHERE POST_ID = :NEW.POST_ID;
	T_ID := :NEW.TAGGED_ID;
	NOTI_TYPE := 'tag';
	P_ID := :NEW.POST_ID;
	
	CREATE_NOTIFICATION( F_ID, T_ID, P_ID, NOTI_TYPE);

END ;
/


--trigger when a user follows another user
CREATE OR REPLACE TRIGGER FOLLOW_USER_TRIGGER
BEFORE INSERT
ON FOLLOWS
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	P_ID NUMBER;
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	F_ID := :NEW.FOLLOWER_ID;
	P_ID := NULL;
	T_ID := :NEW.FOLLOWEE_ID;
	NOTI_TYPE := 'follow';
	
	CREATE_NOTIFICATION( F_ID, T_ID, P_ID, NOTI_TYPE);

END ;
/



--trigger when a user unfollows another user
CREATE OR REPLACE TRIGGER UNFOLLOW_USER_TRIGGER
BEFORE DELETE
ON FOLLOWS
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	F_ID := :OLD.FOLLOWER_ID;
	T_ID := :OLD.FOLLOWEE_ID;
	NOTI_TYPE := 'follow';
	
	DELETE FROM NOTIFICATION
  WHERE FROM_ID = F_ID AND TO_ID = T_ID AND CONTENT = NOTI_TYPE;

END ;
/

--trigger to handle reply or comment notification
CREATE OR REPLACE TRIGGER COMMENT_NOTIFY_TRIGGER
BEFORE INSERT
ON REPLY
FOR EACH ROW

DECLARE
	F_ID NUMBER;
	T_ID NUMBER; 
	P_ID NUMBER;
	NOTI_TYPE VARCHAR2(20);
	
BEGIN

	SELECT COMMENTER_ID, POST_ID INTO F_ID, P_ID FROM COMMENTS WHERE COMMENT_ID = :NEW.REPLY_ID;
	SELECT USER_ID INTO T_ID FROM POST WHERE POST_ID = P_ID;
	
	IF :NEW.REPLY_ID = :NEW.PARENT_ID THEN
		NOTI_TYPE := 'comment';
		
		FOR R IN (SELECT DISTINCT COMMENTER_ID FROM COMMENTS, REPLY
		WHERE COMMENTS.COMMENT_ID = REPLY.REPLY_ID AND POST_ID = P_ID 
		AND  REPLY_ID = PARENT_ID AND COMMENTER_ID <> T_ID)
		LOOP
			CREATE_NOTIFICATION( F_ID, R.COMMENTER_ID, P_ID, NOTI_TYPE);
		END LOOP;

	ELSE 
		NOTI_TYPE := 'reply';
		
		FOR R IN (SELECT DISTINCT COMMENTER_ID FROM COMMENTS , REPLY
		WHERE COMMENTS.COMMENT_ID = REPLY.REPLY_ID AND PARENT_ID = :NEW.PARENT_ID AND COMMENTER_ID <> T_ID)
		LOOP 
				CREATE_NOTIFICATION( F_ID, R.COMMENTER_ID, P_ID, NOTI_TYPE);
		END LOOP;
		
	END IF;
	
		CREATE_NOTIFICATION( F_ID, T_ID, P_ID, NOTI_TYPE);
		
END ;
/



